name: python-app

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    concurrency:
      group: build-group
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # (opcjonalnie) Wylistuj pliki w logach, by upewnić się co do struktury
      - name: List files
        run: |
          pwd
          ls -R

      # Cache wirtualnego środowiska
      - name: Cache build venv
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      # Instalacja Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Konfiguracja, by .venv był w folderze projektu
      - name: Configure Poetry
        working-directory: example-app
        run: |
          poetry config virtualenvs.in-project true

      # Instalacja zależności
      - name: Install dependencies
        working-directory: example-app
        run: |
          poetry install

  lint:
    runs-on: ubuntu-latest
    concurrency:
      group: lint-group
    needs: build  # job zostanie uruchomiony PO zakończeniu 'build'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Cache build venv
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      # Musimy zainstalować Poetry w tym jobie, bo każde zadanie startuje w świeżym środowisku
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Lint
      - name: lint
        working-directory: example-app
        run: |
          poetry run flake8 .

      # Formatter
      - name: formatter
        working-directory: example-app
        run: |
          poetry run black --check .

      # Security
      - name: security
        working-directory: example-app
        run: |
          poetry run bandit -r .

  unittests:
    runs-on: ubuntu-latest
    concurrency:
      group: unittests-group
    needs: lint  # czekaj na lint, który zawiera też formatter/security
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Cache build venv
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run Unit Tests
        working-directory: example-app
        run: |
          poetry run pytest --verbose

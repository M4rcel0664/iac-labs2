name: python-app  # nazwa workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build-deps:
    runs-on: ubuntu-latest
    concurrency:
      group: build-deps-group
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      # Krok diagnostyczny (opcjonalnie) - zobaczysz strukturę plików w logach
      - name: List files
        run: |
          pwd
          ls -R

      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          # Ścieżka do folderu z .venv -> w tym przykładzie "example-app/.venv"
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          # Dodajemy Poetry do PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Configure Poetry to create venv in the project folder
        working-directory: example-app
        run: |
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        working-directory: example-app
        run: |
          poetry install

  static-tests:
    runs-on: ubuntu-latest
    concurrency:
      group: static-tests-group
    needs: build-deps  # job uruchomi się po zakończeniu build-deps
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      - name: Add Poetry to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Lint
        working-directory: example-app
        run: |
          poetry run flake8 .

      - name: Formatter
        working-directory: example-app
        run: |
          poetry run black --check .

      - name: Security
        working-directory: example-app
        run: |
          poetry run bandit -r .

  unit-tests:
    runs-on: ubuntu-latest
    concurrency:
      group: unit-tests-group
    needs: 
      - build-deps
      - static-tests  # Jeśli chcesz, by testy jednostkowe czekały na static-tests
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Cache build venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: example-app/.venv
          key: ${{ runner.os }}-venv

      - name: Add Poetry to PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Tests
        working-directory: example-app
        run: |
          poetry run pytest --verbose
